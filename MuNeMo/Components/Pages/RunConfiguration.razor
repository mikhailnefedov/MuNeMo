@page "/RunConfiguration"
@rendermode InteractiveServer
@using MuNeMo.Scripting
@using MuNeMo.Components.Elements
@inject IShellScriptRepository ShellScriptRepository

<style>
    #split-configuration-container { 
        display: flex;
        height:  500px;
    }

    #yaml-configuration-editor, #yaml-documentation-container {
        flex: 1;
        padding: 10px;
        box-sizing: border-box;
    }

    #yaml-configuration-editor { 
        border-right: 1px solid #ccc;
    }

    #yaml-documentation-container { 
        overflow-y: auto;
    }
</style>

<PageTitle>Run multi-gitter</PageTitle>

<label>Run configuration:</label>

<div id="split-configuration-container">
    <div id="yaml-configuration-editor">
        <YamlCodeEditor></YamlCodeEditor>
    </div>
    <div id="yaml-documentation-container">
        <YamlConfigurationDocumentation></YamlConfigurationDocumentation>
    </div>
</div>

<hr />

<div>
    <label>Script generation:</label>
</div>

@foreach (var element in _elements)
{
    <div>
        @if (element.Type == ScriptType.ScriptCall)
        {
            var script = element.Script as ShellScript;
            <ScriptCallWidget Script="script"></ScriptCallWidget>
        }
        else if (element.Type == ScriptType.CustomScript)
        {
            <ShellScriptCodeEditor></ShellScriptCodeEditor>
        }
    </div>
    <hr />
}

@foreach (var script in availableShellScripts)
{
    <button @onclick="() => UseShellScript(script)">@script.Name</button>
}
<button @onclick="AddCode">Add Code</button>

@code {
    private string inputValue;
    private List<ShellScript> availableShellScripts;
    private List<DynamicElement> _elements = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        availableShellScripts = ShellScriptRepository.GetShellScripts();
    }

    private void UseShellScript(ShellScript script)
    {
        _elements.Add(new DynamicElement { Type = ScriptType.ScriptCall, Script = script, Content = script.Name });
    }

    private void AddCode()
    {
        _elements.Add(new DynamicElement { Type = ScriptType.CustomScript, Content = "" });
    }

    private class DynamicElement
    {
        public ScriptType Type { get; set; }
        public IScript Script { get; set; }
        public string Content { get; set; }
    }

    private enum ScriptType
    {
        ScriptCall,
        CustomScript
    }

}
